# -*- coding: utf-8 -*-
"""Plagarism_checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j6wgPf6v4IU6HbNbCm-x2yr0Jxu2xGOH
"""

import os   #to interact with os

from sklearn.feature_extraction.text import TfidfVectorizer  #transforms text to numericalform
from sklearn.metrics.pairwise import cosine_similarity

path = "/content/student_files"
student_files = [doc for doc in os.listdir(path) if doc.endswith('.txt')]

student_files

cwd = os.getcwd()     # Get the current working directory (cwd)
files = os.listdir(cwd)  # Get all the files in that directory
print("Files in %r: %s" % (cwd, files))

file_data = [open(_file, encoding='utf-8').read() for _file in student_files]

file_data

def vectorize(text):
  return TfidfVectorizer().fit_transform(text).toarray()

def similarity(doc1, doc2):
  return cosine_similarity([doc1, doc2])

vectors = vectorize(file_data)

vectors

s_vectors = list(zip(student_files, vectors))
s_vectors

plagarism_results = set()

def check_plag():
  global s_vectors
  for student_a, text_vector_a in s_vectors:
    new_vectors = s_vectors.copy()
    curr_index = new_vectors.index((student_a, text_vector_a))
    print(curr_index)
    del new_vectors[curr_index]     #deletes comparision from same file ex-doc1anddoc2
    for student_b, text_vector_b in new_vectors:
      sim_score = similarity(text_vector_a, text_vector_b)[0][1]
      student_pair = sorted((student_a, student_b))
      print(sim_score)
      print(student_pair)
      score = (student_pair[0], student_pair[1], sim_score)
      plagarism_results.add(score)
  return plagarism_results

for data in check_plag():
  print (data)

print(plagarism_results)

import pandas as pd
df = pd.DataFrame(plagarism_results, columns=['doc-1', 'doc-2', 'percentage'])

df.set_index('doc-1', inplace=True)
print(df)

